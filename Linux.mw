== Introduction ==

This section of the project contains information on using the [http://www.kernel.org/ Linux kernel] port for the OpenRISC 1000 family.

Information about Linux on OpenRISC as well as updated toolchains can be found at http://openrisc.net

Features are: 
 •Free, open source code with no royalty
 •UNIX class operating system
 •Upstream
 •gdbserver for OpenRISC 
 •Process protection through use of the Memory Management Unit
 •Multitasking, preemptive scheduling
 •Interprocess communication and synchronization
 •TCP/IP networking and numerous other network protocols
 •File systems NFS, ext2, MS-DOS, FAT16/32 and others
 •PS2 Keyboard

== Status ==
 
OpenRISC is officially supported in the Linux kernel since version 3.1 and can be downloaded from https://www.kernel.org. We do however recommend that you use one of the kernels from http://git.openrisc.net/ as they contain some convenient features such as a built-in initramfs and extra board configurations for OpenRISC not found in the upstream kernel. 

A gdbserver is now available in SVN for use when debugging applications under Or1ksim Linux. gdbserver acts as a GDB remote serial protocol server for a Linux application, allowing the program to be debugged remotely using GDB.

===Supported Boards===
 
Only DE0 Nano and a configuration for or1ksim are officially supported in the kernel sources. See below for how to add support for additional boards. Device trees and configuration files cod other boards can be found in the [[https://github.com/openrisc/orpsoc-cores orpsoc-cores]] collection (e.g. https://github.com/openrisc/orpsoc-cores/blob/master/systems/neek/data/sw/neek.dts)

== Download source ==
 
At present the Linux port is maintained by Jonas Bonn of South Pole and kept in their git repositories http://git.openrisc.net/cgit.cgi/jonas/linux/.
 
To obtain a copy of the kernel tree source with OpenRISC support, ensure git is installed and run
 
  git clone git://git.openrisc.net/jonas/linux

== Build and run on or1ksim ==


The following commands, will build a kernel, and then run it on the OpenRISC architectural simulator. Note that there is a build of BusyBox pre-configured in the initial ramdisk filesystem.

Note that you will need the latest OpenRISC GNU toolchain port and or1ksim installed.

 make ARCH=openrisc defconfig
  
 make menuconfig
 
 Make edits according to http://opencores.net/forum,OpenRISC,0,5435

 make CROSS_COMPILER=or1k-elf-
 
 or1k-elf-sim -f arch/openrisc/or1ksim.cfg vmlinux

[[File:linux30_menuconf_doc.jpg|thumb|350px|left|linux-3.0 menuconf Photo]]
[[File:linux30_xterm.png|thumb|400px|center|linux-3.0 xterm Photo]]

== Build and run on FPGA ==



The following commands, will build a kernel, and then run it on FPGA board. An example of demonstration using Virtex5 ML501 is illustrate in the following photo

These guides go into detail regarding debugging specific targets. [[Debugging physical targets (FPGA/ASIC)]] 
  or_debog_proxy$ ./or_debug_proxy -r 55555
  
  linux-3.0$ Minicom (115200 8N1)
  
  linux-3.0$ or32-linux-gdb vmlinux
[[File:linux_30_work.png|thumb|400px|center|linux-3.0 ML501 Photo]]

Remember that this is using GDB to debug the kernel itself. The GDB remote serial protocol server (or_debug_proxy) does not have visibility of the MMU, so you will be using physical addresses, which means symbolic names almost certainly will not work.

If you wish to debug applications running under Linux, you should use [[OpenRISC GNU tool chain#Building_gdbserver|gdbserver]] instead.
