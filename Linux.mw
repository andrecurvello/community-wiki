== Introduction ==

This section of the project contains information on using the [http://www.kernel.org/ Linux kernel] port for the OpenRISC 1000 family.

Information about Linux on OpenRISC as well as updated toolchains can be found at http://openrisc.net

Features are: 
 •Free, open source code with no royalty
 •UNIX class operating system
 •Upstream
 •gdbserver for OpenRISC 
 •Process protection through use of the Memory Management Unit
 •Multitasking, preemptive scheduling
 •Interprocess communication and synchronization
 •TCP/IP networking and numerous other network protocols
 •File systems NFS, ext2, MS-DOS, FAT16/32 and others

== Status ==
 
Kernel version is tracking mainline. It is capable of booting and running BusyBox userspace. The C library providing user space support is uClibc.

gdbserver is now available in SVN for use when debugging applications under Or1ksim Linux. gdbserver acts as a GDB remote serial protocol server for a Linux application, allowing the program to be debugged remotely using GDB.

== Download source ==
 
At present the Linux port is maintained by Jonas Bonn of South Pole and kept in their git repositories http://git.openrisc.net/cgit.cgi/jonas/linux/.
 
To obtain a copy of the kernel tree source with OpenRISC support, ensure git is installed and run
 
  git clone git://git.openrisc.net/jonas/linux

== Build and run on or1ksim ==


The following commands, will build a kernel, and then run it on the OpenRISC architectural simulator. Note that there is a build of BusyBox pre-configured in the initial ramdisk filesystem.

Note that you will need the latest OpenRISC GNU toolchain port and or1ksim installed.

  linux-3.0$ make ARCH=openrisc defconfig
  
  linux-3.0$ make menuconfig
  
  linux-3.0$ make CROSS_COMPILER=or32-linux
  
  linux-3.0$ or32-elf-sim -f arch/openrisc/or1ksim.cfg vmlinux
[[File:linux30_menuconf_doc.jpg|thumb|300px|left|linux-3.0 menuconf Photo]]
[[File:linux30_xterm.png|thumb|300px|center|linux-3.0 xterm Photo]]

== Build and run on FPGA ==

[[File:linux_30_work.png|thumb|linux-3.0 ML501 Photo]]

The following commands, will build a kernel, and then run it on the OpenRISC architectural FPGA. An exemple of demenstration using Virtex5 ML501 is illustrat in the following photo
  or_debog_proxy$ ./or_debug_proxy -r 55555
  
  linux-3.0$ Minicom 115200 8N1
  
  linux-3.0$ or32-linux-gdb vmlinux
