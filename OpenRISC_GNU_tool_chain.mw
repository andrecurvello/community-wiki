At present OpenRISC is supported by a 32-bit GNU toolchain offering C and C++ support with static libraries only. The toolchain is available in two forms
* for bare metal use, based on the newlib library
* for Linux application use, based on the uClibc library. 

The toolchains are available as pre-compiled binaries, and stable source code snapshots and in development versions under SVN.

For help with, or to report any issues, see the [[OpenRISC_GNU_tool_chain_troubleshooting|troubleshooting page]].

'''Note: There is an ongoing transition away from the or32- prefix to or1k-. In practice this means that the stable toolchain uses the old CPU target or32 (e.g. or32-elf, or32-linux), while the new/developemnt toolchain uses or1k (eg. or1k-elf, or1k-linux). Please consider using the new or1k toolchain - especially if you're building straight from the development repos and don't have any issues with backwards compatibility.
'''

== Installation ==

=== Prebuilt versions ===

The following tool chains were compiled from the head of [https://github.com/openrisc/ the OpenRISC github] or1k-gcc and or1k-src repositories as they were on 27 September 2013. They contain not just GCC, but binutils, GDB, etc. and are newlib-based.

* [ftp://ocuser:ocuser@openrisc.opencores.org/toolchain/gcc-or1k-elf-4.8.1-x86_64.tar.bz2 gcc-or1k-elf-4.8.1-x86_64]
* [ftp://ocuser:ocuser@openrisc.opencores.org/toolchain/gcc-or1k-elf-4.8.1-x86.tar.bz2 gcc-or1k-elf-4.8.1-x86] (built on a slightly old Debian machine)
* [ftp://ocuser:ocuser@openrisc.opencores.org/toolchain/gcc-or1k-elf-4.8.1-ubuntu-13.04-x86.tar.bz2 gcc-or1k-elf-4.8.1-ubuntu-13.04-x86.tar.bz2] (built on a Ubuntu 13.04 machine)
* [ftp://ocuser:ocuser@openrisc.opencores.org/toolchain/gcc-or1k-elf-4.8.1-armhf.tar.bz2 gcc-or1k-elf-4.8.1-armhf]

=== Installation from source ===

==== Prerequisites ====

Various libraries are required to compile the GNU tools (see [http://gcc.gnu.org/install/prerequisites.html Prerequisites for GCC]). The following is a command for Ubuntu/Debian-based GNU/Linux systems to ensure the required libraries are installed. 

 sudo apt-get -y install build-essential make gcc g++ flex bison patch \
 texinfo libncurses5-dev libmpfr-dev libgmp3-dev libmpc-dev libzip-dev \
 python-dev libexpat1-dev

Fedora/Red Hat/Centos-based Linux systems use yum:

 sudo yum install build-essential make gcc g++ flex bison patch texinfo \
 libncurses-devel libmpfr-devel libgmp3-devel libmpc-devel libzip-devel

Please update this Wiki if any tools are missing, or to provide a one-liner to install the required prerequisites on another distribution.

'''Note.''' The [[Or1ksim]] library is needed by GDB (as its simulator), so this ''must'' be installed first. See the [[Or1ksim]] page for details. Note, however, that you will not be able to run the Or1ksim tests ('''make check''') until the toolchain has been installed. This is a known circular dependency in the tool chain build.

==== Newlib toolchain (or1k-elf) ====

See the following links for the appropriate development versions of the tools and libraries: [[OpenRISC_GNU_tool_chain#Development_version|binutils]], [[OpenRISC_GNU_tool_chain#Development_version_2|gcc]], [[OpenRISC_GNU_tool_chain#Development_version_3|newlib]]


The following assumes a checkout of the development repositories, which at present can be done with the following:

 git clone git://github.com/openrisc/or1k-src.git
 git clone git://github.com/openrisc/or1k-gcc.git

The following compile instructions will install into <code>/opt/or1k-toolchain</code> so make sure it exists and is writable by the user or whoever is running the <code>make install</code> commands.

Make a build directory each for the gnu-src tools and gcc, alongside the checkouts, we'll call them <code>bld-or1k-src</code> and <code>bld-or1k-gcc</code> respectively.
 mkdir bld-or1k-src
 mkdir bld-or1k-gcc

Add toolchain to PATH
 export PATH=$PATH:/opt/or1k-toolchain/bin

Build the first set of tools, binutils etc.
NOTE: on 32-bit machines --disable-werror is needed due to an enum acting as bit mask is considered signed
 cd bld-or1k-src
 ../or1k-src/configure --target=or1k-elf --prefix=/opt/or1k-toolchain --enable-shared \
 --disable-itcl --disable-tk --disable-tcl --disable-winsup --disable-gdbtk --disable-libgui --disable-rda \
 --disable-sid --disable-sim --disable-gdb --with-sysroot --disable-newlib --disable-libgloss --disable-werror
 make -j9
 make install

Build gcc
 cd ../bld-or1k-gcc
 
 ../or1k-gcc/configure --target=or1k-elf --prefix=/opt/or1k-toolchain --enable-languages=c \
 --disable-shared --disable-libssp --disable-werror
 make -j9
 make install

Build newlib and gdb (without or1ksim in this case)
 cd ..
 rm -rf bld-or1k-src
 mkdir bld-or1k-src  
 cd bld-or1k-src
 
 ../or1k-src/configure --target=or1k-elf --prefix=/opt/or1k-toolchain --enable-shared --disable-itcl \
 --disable-tk --disable-tcl --disable-winsup --disable-gdbtk --disable-libgui --disable-rda --disable-sid \
 --enable-sim --disable-or1ksim \
 --enable-gdb  --with-sysroot --enable-newlib --enable-libgloss --disable-werror
 make -j9
 make install

Build gcc again, this time with newlib
 cd ..
 rm -rf bld-or1k-gcc
 mkdir bld-or1k-gcc
 cd bld-or1k-gcc
 
 ../or1k-gcc/configure --target=or1k-elf --prefix=/opt/or1k-toolchain --enable-languages=c,c++ --disable-shared \
 --disable-libssp --with-newlib --disable-werror
 make -j9
 make install

See the page on the [[Newlib|newlib library port]] for details on what you've just built and installed.

==== Linux (uClibc) toolchain (or1k-linux-uclibc) ====

===== Initial preparations =====
 
 cd ~
 mkdir openrisc
 cd openrisc
 
 sudo mkdir /opt/or1k-toolchain
 sudo chown username:username /opt/or1k-toolchain
 
 export PATH=$PATH:/opt/or1k-toolchain/bin
 unset LD_LIBRARY_PATH

===== or1k-src =====

NOTE: on 32-bit machines --disable-werror is needed due to an enum acting as
bit mask is considered signed

 cd ~/openrisc
 git clone git://github.com/openrisc/or1k-src.git
 mkdir build-or1k-src
 cd build-or1k-src
 
 ../or1k-src/configure --target=or1k-linux-uclibc --prefix=/opt/or1k-toolchain \
 --disable-shared --disable-itcl --disable-tk --disable-tcl --disable-winsup \
 --disable-libgui --disable-rda --disable-sid --disable-sim --disable-gdb \
 --with-sysroot --disable-newlib --disable-libgloss --disable-werror
 
 make -j9
 make install

===== Linux headers =====

 export SYSROOT=/opt/or1k-toolchain/or1k-linux-uclibc/sys-root
 
 cd ~/openrisc
 git clone git://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git
 cd linux
 ARCH=openrisc make INSTALL_HDR_PATH=${SYSROOT}/usr headers_install

===== gcc stage 1 =====

 cd ~/openrisc
 git clone git://github.com/openrisc/or1k-gcc
 
 mkdir build-gcc
 cd build-gcc
 
 ../or1k-gcc/configure --target=or1k-linux-uclibc --prefix=/opt/or1k-toolchain --disable-libssp \
 --srcdir=../or1k-gcc --enable-languages=c --without-headers --enable-threads=single \
 --disable-libgomp --disable-libmudflap --disable-shared --disable-libquadmath \
 --disable-libatomic --disable-werror
 
 make -j9
 make install

===== uClibc =====

 export SYSROOT=/opt/or1k-toolchain/or1k-linux-uclibc/sys-root
 
 cd ~/openrisc
 git clone git://github.com/openrisc/uClibc-or1k.git
 
 cd uClibc-or1k
 make ARCH=or1k defconfig
 make -j9
 make PREFIX=$SYSROOT install

===== gcc stage 2 =====

 cd ~/openrisc
 cd build-gcc
 
 rm -rf *
 
 ../or1k-gcc/configure --target=or1k-linux-uclibc --prefix=/opt/or1k-toolchain --disable-libssp \
 --srcdir=../or1k-gcc --enable-languages=c,c++ --enable-threads=posix --disable-libgomp \
 --disable-libmudflap --with-sysroot=${SYSROOT} --disable-multilib --disable-werror
 
 make -j9
 make install

===== Hints when cross compiling with the or1k-linux-uclibc toolchain =====

Since autotools doesn't know about or1k run the following command to replace or32 with or1k

 find ./ -type f -name '*' -print | xargs sed -i 's/or32/or1k/'

Building with the following commands will work in a number of situations

 ./configure --host=or1k-linux-uclibc --prefix=/opt/or1k-toolchain/or1k-linux-uclibc/sys-root/usr
 make
 make install

Some programs embed the --prefix parameter into the binaries, but those programs usually use the DESTDIR environment variable
 ./configure --host=or1k-linux-uclibc --prefix=/usr
 make
 make DESTDIR=/opt/or1k-toolchain/or1k-linux-uclibc/sys-root install

=== Support for non-Linux systems ===

==== Microsoft Windows with Cygwin ====

At present only the older pre-compiled OpenRISC toolchains exist for Cygwin. The OpenRISC project currently does not have a maintainer for the toolchain on the Cygwin platform. Without one it is not certain that each toolchain release will be built for Cygwin.

If you would like to contribute to the project by maintaining a build script and guide for Cygwin platforms, please contact the OpenRISC team.

Alternatively, the ''orbuild'' framework is known to work under Cygwin, see above for more information.

===== Precompiled or1ksim and assembler =====

A contributor has made availble a precompiled version of or1ksim-0.4.0 and the OR1K assembler for Cygwin. 

It can be downloaded [http://j-software.dk/or1k/or32.zip here].

==== Apple Mac OS X ====

Robert Guenzel has provided an [http://chschroeder.gamiro.de/rg/or1ksim_macOS10.4.pdf application note] on building the toolchain (excluding GDB) for Mac OS 10.4. Users will find this provides valuable additional information beyond the instructions above.

It seems Guenzel was able to install the toolchain without hick-ups. This is not the case anymore, please follow the instructions below to install the newlib toolchain.  

===== Newlib toolchain (or1k-elf) =====

See the following links for the appropriate development versions of the tools and libraries: [[OpenRISC_GNU_tool_chain#Development_version|binutils]], [[OpenRISC_GNU_tool_chain#Development_version_2|gcc]], [[OpenRISC_GNU_tool_chain#Development_version_3|newlib]]


The following assumes a checkout of the development repositories, which at present can be done with the following:

 git clone git://github.com/openrisc/or1k-src.git
 git clone git://github.com/openrisc/or1k-gcc.git

The following compile instructions will install into <code>/opt/or1k-toolchain</code> so make sure it exists and is writable by the user or whoever is running the <code>make install</code> commands.

Make a build directory each for the gnu-src tools and gcc, alongside the checkouts, we'll call them <code>bld-or1k-src</code> and <code>bld-or1k-gcc</code> respectively.
 mkdir bld-or1k-src
 mkdir bld-or1k-gcc

Requirements: 
  Apple Developer: Command Line Tools
  Brew installations: gmp libmpc mpfr cloog isl
  Variables ~/.bash_profile: export CC=cc / export CXX=c++
  Add toolchain to PATH: /opt/or1k-toolchain/bin

Build the first set of tools, binutils etc.
 cd bld-or1k-src
 
 ../or1k-src/configure --target=or1k-elf --prefix=/opt/or1k-toolchain --enable-shared \
 --disable-itcl --disable-tk --disable-tcl --disable-winsup --disable-libgui --disable-rda \
 --disable-sid --disable-sim --disable-gdb --with-sysroot --disable-newlib \
 --disable-libgloss  --disable-werror
 make
 make install

Build gcc
 cd ../bld-or1k-gcc
 
 ../or1k-gcc/configure --target=or1k-elf --prefix=/opt/or1k-toolchain --enable-languages=c \
 --disable-shared --disable-libssp
 make
 make install

Build newlib and gdb (without or1ksim in this case)
 cd ..
 rm -rf bld-or1k-src
 mkdir bld-or1k-src  
 cd bld-or1k-src
 
 ../or1k-src/configure --target=or1k-elf --prefix=/opt/or1k-toolchain --enable-shared \
 --disable-itcl --disable-tk --disable-tcl --disable-winsup --disable-libgui --disable-rda \
 --disable-sid --disable-sim --disable-or1ksim --enable-gdb  --with-sysroot --enable-newlib \
 --enable-libgloss --disable-gdbtk --disable-werror
 make
 make install

Build gcc again, this time with newlib
 cd ..
 rm -rf bld-or1k-gcc
 mkdir bld-or1k-gcc
 cd bld-or1k-gcc
 
 ../or1k-gcc/configure --target=or1k-elf --prefix=/opt/or1k-toolchain --enable-languages=c,c++ \
 --disable-shared --disable-libssp --with-newlib
 make
 make install

See the page on the [[Newlib|newlib library port]] for details on what you've just built and installed.

Obs.: 
# We compile or1k-src without "sim". Generally it is enabled. But if you turn it on, you get compilation problems with or1k-sim. 
# We disable gdbtk (probably gdbtui). We do this to avoid tcl/tk problems that arise on OSX. Some of it can be circumvented by changing the following lines in acinclude.m4 under gdb and libgui. 
 dir=`echo ${TCL_INCLUDE_SPEC}/tcl-private/generic | sed -e s/-I//` 
 dir=`echo ${TK_INCLUDE_SPEC}/tk-private/generic | sed -e s/-I//`
to
 dir=`echo ${TCL_INCLUDE_SPEC}/Headers/tcl-private | sed -e s/-I//` 
 dir=`echo ${TK_INCLUDE_SPEC}/Headers/tk-private | sed -e s/-I//`
* Then run autoconf under gdb and libgui. But you end up still having some other problems because the variable MAC_TCL turns out not be defined by the configure script.

== Tools ==

=== binutils ===

This is a collection of tools for the manipulation of object code in various object file formats. Among its many tools, it provides the assembler and linker.

More information about the GNU project's release of binutils can be found at its [http://www.gnu.org/software/binutils/ GNU homepage].

It can be found here: [https://github.com/openrisc/or1k-src https://github.com/openrisc/or1k-src]

'''Note:''' There is an older version in OpenCores SVN for compatibility with the old or32 toolchain. That version is no longer being developed and doesn't have support for dynamic objects and atomic operations among other things . Only use this is you require the or32 toolchain

=== GCC ===

A version of GCC targeted at the OpenRISC platform is provided here. Known as a cross compiler, it is a version which will create code that is executable on an OpenRISC processor.

More information about the official GCC releases can be found at the project's homepage.

==== GCC stable version ====

==== Development version ====

A development version is underway and is relatively stable. It adds the following features:

* dynamic object support
* no delay-slot code generation
* support for thread-local storage

It is currently based on gcc-4.8.0.

It is hosted here: [https://github.com/openrisc/or1k-gcc https://github.com/openrisc/or1k-gcc]

==== Backwards compatibility ====

A number of backwards compatibility issues have been identified.
* As noted above, global variables in the source code are no longer prefixed by underscore ('_') in the generated code.
* The constants '''OR1K''', '''__or1k__''' and '''__OR1K__''' were not defined in GCC 4.2.2 (they had been in earlier releases). These are now defined.
* GCC 3.4.4. for OpenRISC assumed the availability of hardware multiplication, but not hardware division by default (i.e. -mhard-mul, -msoft-div), which was consistent with the default Verilog configuration. GCC 4.2.2 changed this to assume neither hardware multiplication nor hardware division are present (i.e. -msoft-mul, -msoft-div). The current GCC 4.5.1, has restored the default to -mhard-mul, -msoft-div ofr consistency with the default hardware configuration.

=== GDB ===

The GNU Project Debugger (GDB) is a standard debugging tool. It is used for debugging code while it is executing on any OpenRISC target, be it simulated (architectural simulator or RTL) or physical (FPGA, or ASIC.) It also provides a convenient mechanism for transferring and running code in any OpenRISC based system.

==== GDB stable version ====

GDB 7.2 has now been ported to the OpenRISC 1000 architecture and is regarded as the stable implementation.

Key new features are:
* support for DWARF2 debug format by default.
* support for GCC 4.5.1.
* support for gdbserver under [[Linux|OpenRISC Linux]].
* support for core file debugging

Known issues are:
* there are still many regression failures, which remain to be investigated.
* gdbserver relies on a range of Linux system calls, not all of which are fully implemented.
* OpenRISC Linux does not currently generate valid core files.
* Message "Value being assigned to is no longer active" is given when trying to alter a register immediately after loading a new program image. This is a known bug in GDB. It is one feature of a complex problem with the way GDB represents stack frames.
:One workaround is to set a breakpoint on the first instruction of the loaded image, run to that breakpoint (which will do nothing), and then GDB will allow registers to be set. However user nyawn has found a small [cvs.fedoraproject.org/viewvc/devel/gdb/gdb-6.8-bz436037-reg-no-longer-active.patch?view=log patch] from the Fedora project which fixes this particular problem. 

Details of the internal workings of the GDB port for OpenRISC 1000 can be found in the application note [http://www.embecosm.com/download/ean3.html Howto: Porting the GNU Debugger: Practical Experience with the OpenRISC 1000 Architecture] published by Embecosm. Although based on GDB 6.8, much of the content is relevant to GDB 7.2.

Details of the implementation of the RSP server functionality for Or1ksim can be found in the application note Howto: GDB Remote Serial Protocol: Writing a RSP Server published by Embecosm.

This version of GDB works with the graphical user interface DDD. It has also been tested with the Insight graphical debugger and appears to work.

==== Backwards compatibility ====

The following compatibility issues have been noted.
* The current stable version is only compatible with OpenRISC GCC 4.5.1 and later, due to the change in global symbol handling and changes to function prologues.
* Support for the legacy OpenRISC Remote JTAG Protocol has now been dropped.
* Only version 0.3.0 or later of the architectural simulator, [[Or1ksim]] is supported.

==== Building gdbserver ====

gdbserver can be run on an OpenRISC linux system to act as a RSP client and allow remote debugging of ''applications'' on the Linux system.

gdbserver must be built by hand. The following instructions assume you have used the <tt>bld-all.sh</tt> script to build the or32-linux toolchain.

'''Note.''' You must build your tool chain with uClibc compiled with UCLIBC_HAS_THREADS=y and PTHREADS_DEBUG_SUPPORT=y.

Change to the bd-linux-gdb/gdb directory

 cd bd-linux-gdb/gdb

Create a new directory, gdbserver, and change to it.

 mkdir gdbserver
 cd gdbserver

Configure gdbserver to run on or32-linux as host

 ../../../gdb-7.2/gdb/gdbserver/configure --host=or32-linux

Build the system

 make

Copy the <tt>gdbserver</tt> executable to the target Linux system for use. There are two ways to do this:
# FTP the file to the target OpenRISC Linux system. '''Note.''' You will need to make the file executable after it has been copied using ''chmod''.
# Copy <tt>gdbserver</tt> into a suitable directory in the Linux initramfs (for example arch/openrisc/support/initramfs/bin) and rebuild Linux. The executable will then always be there.

You can run gdbserver on the target Linux system as follows (using port 51000 as an example):

 gdbserver :51000 ''my_program''

This will allow ''my_program'' to be debugged remotely via port 51000. On the host workstation, you can then connect to this target (in this example at IP address 192.168.0.37) as follows:

 $ or32-linux-gdb ''my_program''
 ...
 (gdb) target remote 192.168.0.37:51000
 (gdb) break main
 (gdb) run

Which will run the program until it hits the breakpoint at the start of <tt>main ()</tt>. '''Note.''' You must have a copy of the program both on the target Linux machine (to execute) and on the workstation running gdb (for the symbol table).

==== Using GDB with Or1ksim ====

Users often wish to use GDB with [[Or1ksim]], the architectural simulator. Here  are some simple guidelines to get started.

Take a simple program which you have compiled something like this:

 or32-elf-gcc -g HelloWorld.c -o HelloWorld

'''Note.''' Remember to use -g so debug information is included. It doesn't affect program performance, but makes for a much richer debug experience.

Simplest way to debug is to use the built in Or1ksim within GDB. By default that gives you a simple config with 8M of memory.

 or32-elf-gdb HelloWorld
 ...
 (gdb) target sim
 (gdb) load
 <set up any breakpoints etc>
 (gdb) run
 ...

If you want to use Or1ksim standalone (perhaps with a more complex configuration), then start it up, specifying a port for debug connection. You can either do this within the config file (it is the ''rsp_port'' parameter), or specify it on the command line:

 or32-elf-sim --srv=51000 ...

This sets up GDB to use port 51000 to communicate on. You can specify any value up to 65535, although you should definitely avoid values below 1024. If you don't specify a value, Or1ksim will select a port at random and tell you.

In a separate window on the same machine start up GDB

 or32-elf-gdb HelloWorld
 ...
 (gdb) target remote :51000
 (gdb) load
 <set up any breakpoints etc>
 (gdb) continue
 ...

Note that the usage is slightly different, you are connecting to a model that is already "started", so you just continue execution. Don't worry, connecting stalls the model, while loading the image sets the PC to its entry point, so you will continue at the right place.

== Libraries ==

=== newlib ===

Newlib is a smaller and simpler C library than uClibc, and is better suited to development of bare-metal applications. OpenRISC is officially supported in Newlib since version 2.2.0 and can be downloaded from the [ftp://sourceware.org/pub/newlib/index.html Newlib FTP] Further details about the OpenRISC version of Newlib are available on the [[Newlib | newlib port page]].

=== uClibc ===

This is a C library aimed at embedded systems. It removes a lot of the bulk that comes with a standard C library, such as the GNU C Library, but still has all the functionality needed for an operating system such as Linux, so it is ideal for embedded applications.

At present the OpenRISC port of uClibc is hosted on a git repository provided by [http://southpole.se/ South Pole], which can be browsed and downloaded from [http://openrisc.southpole.se/cgit.cgi/jonas/uClibc/ http://openrisc.southpole.se/cgit.cgi/jonas/uClibc/]

For more information about uClibc see the [http://www.uclibc.org/about.html project's homepage].

==== Future plans for uClibc ====

* Write optimized versions of routines in uClibc instead of using generic ones.

== Testing ==

Each tool is tested using the GNU tool regression test suites. The newlib toolchain is tested using the GDB simulator (which is [[Or1ksim]]) standalone. The uClibc toolchain is tested using OpenRISC linux running on Or1ksim, using FTP and telnet through a TUN/TAP Ethernet interface.

The results are large, so there is a separate page for the [[newlib tool chain test results|newlib toolchain test results]] and the [[uClibc tool chain test results|uClibc toolchain test results]].

== Bugs ==

The project uses [http://bugzilla.opencores.org/ Bugzilla] to track all the bugs in its hardware and software. That's a good place to look for existing bugs, or to report a new bug.

=== Support ===

This is an open source project, so the community provides support (although there are companies offering commercial support as well). The various [[OR1K:Community_Portal#Mailing lists|mailing lists]] and [[OR1K:Community_Portal#IRC|IRC]] are good places to seek assistance.

Also check the [[OpenRISC_GNU_tool_chain_troubleshooting|troubleshooting page]] for details on any fixes, or to document any issues with fixes.

== Future plans ==

See [[OR1K:FutureWork|Future Work]]

== Legacy toolchain ==

The OpenRISC toolchain previously used the or32 prefix instead of or1k. If you encounter any tools starting with or32, this is probably part of the legacy toolchain. No further development is being made on the or32 toolchain, and we recommend that you use the or1k toolchain for all new projects. The or32 toolchain is primarily for projects that for different reasons can't or won't upgrade to the or1k toolchain


=== Precompiled binaries ===

==== Latest version ====

'''Note''': This is not an official release but should still be fine to use.

* [ftp://ocuser:ocuser@openrisc.opencores.org/toolchain/openrisc-toolchain-ocsvn-rev789.tar.bz2 for Ubuntu 32-bit] built from SVN rev. 789, also contains [[or1ksim]]

Extract the file under /opt and add the following to your ~/.bashrc (or other shell-appropriate) file.  See the [[#1.0rc1|1.0rc1]] section for more detailed instructions regarding the PATH environment variable.

 export PATH=$PATH:/opt/openrisc/toolchain/bin:/opt/openrisc/or1ksim/bin

For precompiled versions for other PC architectures see below.

==== 1.0rc1 ====
Pre-compiled binaries are only available for the 1.0rc1 version of the Newlib toolchain. All commands have the prefix or32-elf- (for example or32-elf-gcc). Or1ksim 0.5.1 and newlib 0.18.0 are included.
* [ftp://ocuser:ocuser@openrisc.opencores.org/toolchain/or32-elf-1.0rc1-x86.tar.bz2 for Ubuntu x86/i686 (32-bit)]
* [ftp://ocuser:ocuser@openrisc.opencores.org/toolchain/or32-elf-1.0rc1-CentOS-x86_64.tar.bz2 for CentOS-5.5 x86_64 (64-bit)]
* [ftp://ocuser:ocuser@openrisc.opencores.org/toolchain/or32-elf-1.0rc1-OS_X-10.6.3.tar.bz2 for OS X 10.6 (Snow Leopard)] ('''Note.''' no C++ libraries)

The following commands indicate how to install the toolchain from the download archive. The tools are installed to the /opt path and symbolic links are created to more general path names (which helps with switching to more updated versions of the toolchain later.) The shell's PATH environment variable must be updated so that the tools can be located by the system.  Bear in mind that the PATH variable is scanned for matches starting at the beginning and uses the first match it finds.  If your system is not finding the correct tools when compiling, you may need to add the or32 tools to the beginning of the PATH and not the end.  You may choose to install in any other directory to which you have write access.

 cd /opt
 tar xjf ''path to downloaded archive''/''archive name''
 sudo ln -s or32-elf-1.0rc1 or32-elf
 sudo ln -s or1ksim-0.5.1rc1 or1ksim

Having installed the software, add the relevant directories to your PATH. 
Under sh or bash use

 export PATH=$PATH:/opt/or32-elf/bin:/opt/or1ksim/bin

or, to add the tools to the beginning of the PATH

 export PATH=/opt/or32-elf/bin:/opt/or1ksim/bin:$PATH

Under csh or tcsh use:

 setenv PATH $PATH:/opt/or32-elf/bin:/opt/or1ksim/bin

or, to add the tools to the beginning of the PATH

 setenv PATH /opt/or32-elf/bin:/opt/or1ksim/bin:$PATH

These will typically be added to your .profile, .login, .bashrc, or other shell initialization file as appropriate. Note. If the toolchain was installed in a directory other than /opt, substitute that directory's path for /opt.

=== Building from source ===

Source code for the legacy toolchain can be found in [[http://opencores.org/websvn,listing?repname=openrisc&path=%2Fopenrisc%2Ftrunk%2Fgnu-stable%2F#path_openrisc_trunk_gnu-stable_ OpenCores SVN]]

'''Note''': There has been a recent reorganization of the SVN repository, to reduce the size of the SVN checkout. Rather than a single directory, there are now tree directories, '''gnu-stable''' (for the stable tool chain), '''gnu-old''' (for legacy versions) and '''gnu-dev''' (for experimental versions).

The source for the stable version of the GNU tools and newlib is available under SVN:

 svn co http://opencores.org/ocsvn/openrisc/openrisc/trunk/gnu-stable 

'''Note''': There is a known problem with SVN timing out. The checkout will seem OK, but not all files are downloaded and no error message is shown. The solution is to repeatedly run the following command until no more files are downloaded.

 svn update gnu-stable

The source for uClibc and Linux (needed for the header files for the toolchain) is currently held in a [http://git-scm.com/ git] repository run by [http://southpole.se/ South Pole]. It is best to save the source for these into the gnu-stable path just created when checking out from the OpenCores SVN repository.

 cd gnu-stable
 git clone git://git.openrisc.net/jonas/uClibc
 git clone git://git.openrisc.net/jonas/linux

==== Building ====

'''Warning.''' Before you get here have you installed all the prerequisites, ''including Or1ksim''. See [[#Prerequisites|Prequisites]] for details.

There are two toolchains that can be compiled using different libraries.
* The newlib toolchain, with toolchain executables prefixed by or32-elf- is for compiling applications which will be run on the bare metal, or without an operating system (this includes building the Linux kernel).
* The uClibc toolchain, with toolchain exeutables prefixed by or32-linux- is for compiling software intended to run on Linux, as userspace applications.

The script used to build the toolchains is bld-all.sh and it is found in the gnu-src/ path. It will create a unified build environment when compiling the GNU tools (binutils, GCC, GDB.). For a full list of options provided by the build script, run it with the --help option.

 ./bld-all.sh --help 

The following instructions assume the tools are installed in /opt/openrisc, which is a common choice (/opt/or32 is also popular). Substitute your chosen installation directory in the following instructions. It is assumed that [[Or1ksim]] has been installed in /opt/or1ksim.

To build and install both toolchains from scratch:

 ./bld-all.sh --force --prefix /opt/openrisc --or1ksim-dir /opt/or1ksim --uclibc-dir uClibc --linux-dir linux 

To build and install just the newlib toolchain:

 ./bld-all.sh --force --prefix /opt/openrisc --or1ksim-dir /opt/or1ksim --no-uclibc --no-or32-linux 

To build and install just the uClibc toolchain:

 ./bld-all.sh --force --prefix /opt/openrisc --or1ksim-dir /opt/or1ksim --uclibc-dir uClibc --linux-dir linux --no-newlib --no-or32-elf 

Add the new tools to the path. Under sh or bash

 export PATH=$PATH:/opt/openrisc/bin

or, to add the tools to the beginning of the PATH
 
 export PATH=/opt/openrisc/bin:$PATH

Under csh or tcsh

 setenv PATH $PATH:/opt/openrisc/bin

or, to add the tools to the beginning of the PATH

 setenv PATH /opt/openrisc/bin:$PATH

These commands will typically be added to your .profile, .login, .bashrc, or other shell initialization file.

'''Note.''' Some users have reported problems when rebuilding the uClibc toolchain a second time, due to the existing headers on the search path. The solution is to remove the existing implementation from the PATH variable.



=== Binutils ===

or32 binutils is based on binutils 2.20.1

This version does not support dynamic objects or atomic operations found in the newer version

=== GCC ===

GCC 4.5.1 has been ported to OpenRISC and can be checked out from OpenCores SVN

The key changes since the previous version (4.2.2) are:
* Previous versions of OpenRISC GCC prefixed all global symbols (functions and variables) in the compiled code with an underscore ('_'). Historically this was done to avoid namespace clashes. However with ELF output files it really is no longer needed. GDB struggles with mapping the high level names in the compiled code to the values in the object file symbol table, particularly with STABS debug info.
: Most modern compilers leave global names unchanged for ELF targets. With this version of GCC, we have adopted this convention for OpenRISC. However it will mean that code compiled with the old compiler will not be linkable with code from the new compiler (since the naming convention for globals will be different). Assembler modules which link to global names will also need modifying. This should not cause any problem in practice, since there are not large bodies of pre-compiled library code out there, nor substantial bodies of hand-written assembler.
* Previous versions of OpenRISC GCC generated STABS debugging info by default when -g was used. This is now quite an old, inconsistent and limited format. Most modern compilers generate DWARF2 debugging for -g. DWARF2 offers a richer debugging experience, and is the preferred format for GDB. It is what is generated if you use GCC with -ggdb. With this version of GCC, we have made DWARF2 the default debugging format for OpenRISC GCC. This should not cause compatibility problems. STABS debugging output can still be generated by using -gstabs.
* C++ is supported, but uses only static linking of libraries (since dynamic linking is not currently supported in binutils).
* Function prologues are now much more flexible, being generated by the ''prologue'' pattern in the machine definition.
* The "red zone" is reduced to 128 bytes, but is now actually used (previously it was defined to be 2K, but not used. It is thus essential that interrupt handlers do not use the first 128 bytes of stack. An option -mredzone=''size'' is available to change this, including setting the red zone to zero (which will reduce performance).
* Sibcall optimization is now supported by default.
* The frame pointer is omitted for all optimization levels above -O0.
* Option -maj is no longer supported.
* All regression tests now pass.


=== Newlib ===
