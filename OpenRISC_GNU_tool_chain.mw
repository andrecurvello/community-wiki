At present OpenRISC is supported by a 32-bit GNU tool chain offering C and C++ support with static libraries only. The tool chain is available in two forms
* for bare metal use, based on the newlib library
* for Linux application use, based on the uClibc library. 

The tool chains are available as pre-compiled binaries, and stable source code snapshots and in development versions under SVN.

== Installation ==

The stable versions of the tools are based on binutils 2.20.1, GCC 4.5.1 and GDB 7.2. For the bare metal tool chain, they use newlib 0.18.0 and for the Linux application tool chain uClibc 0.9.32. Both tool chains are tested using or1ksim-0.5.1. 

=== Precompiled binaries ===

Pre-compiled binaries are only available for the 1.0rc1 version of the Newlib toolchain. All commands have the prefix or32-elf- (for example or32-elf-gcc). Or1ksim 0.5.1 and newlib 0.18.0 are included.
* [ftp://ocuser:oc@opencores.org/toolchain/or32-elf-1.0rc1-x86.tar.bz2 for Ubuntu x86/i686 (32-bit)]
* [ftp://ocuser:oc@opencores.org/toolchain/or32-elf-1.0rc1-CentOS-x86_64.tar.bz2 for CentOS-5.5 x86_64 (64-bit)]
* [ftp://ocuser:oc@opencores.org/toolchain/or32-elf-1.0rc1-OS_X-10.6.3.tar.bz2 for OS X 10.6 (Snow Leopard)] ('''Note.''' no C++ libraries)

The following commands indicate how to install the toolchain from the download archive. The tools are installed to the /opt path and symbolic links are created to more general path names (which helps with switching to more updated versions of the toolchain later.) The shell's PATH environment variable must be updated. You may choose to install in any other directory to which you have write access.

 cd /opt
 tar xjf ''path to downloaded archive''/''archive name''
 sudo ln -s or32-elf-1.0rc1 or32-elf
 sudo ln -s or1ksim-0.5.1rc1 or1ksim

Having installed the software, add the relevant directories to your path. Under sh or bash use

 export PATH=$PATH:/opt/or32-elf/bin:/opt/or1ksim/bin

Under csh or tcsh use:

 setenv PATH $PATH:/opt/or32-elf/bin:/opt/or1ksim/bin

These will typically be added to your .profile or .login file as appropriate. Note. If the toolchain was installed in a directory other than /opt, substitute that directory's path for /opt.

=== Installation from source ===

==== Prerequisites ====

Various libraries are required to compile the GNU tools. The following is a command for Ubuntu/Debian-based GNU/Linux systems to ensure the required libraries are installed. 

 sudo apt-get -y install build-essential make gcc g++ flex bison patch texinfo libncurses-dev libmpfr-dev libgmp3-dev libmpc-dev libzip-dev

Fedora/Red Hat/Centos-based Linux systems use yum:

 sudo yum install build-essential make gcc g++ flex bison patch texinfo libncurses-dev libmpfr-dev libgmp3-dev libmpc-dev libzip-dev

Please update this Wiki if any tools are missing, or to provide a one-liner to install the required prerequisites on another distribution.

The [[Or1ksim]] library is needed by GDB (as its simulator), so this should be installed first. See the [[Or1ksim]] page for details. Note that you will not be able to run the Or1ksim tests ('''make check''') until the tool chain has been installed.

==== Downloading the source ====

The source for the GNU tools and newlib is available under SVN:

 svn co http://opencores.org/ocsvn/openrisc/openrisc/trunk/gnu-src 

Note. There is a known problem with SVN timing out, so that not all files may be downloaded. Repeatedly run the following command until no more files are downloaded.

 svn update gnu-src

The source for uClibc and Linux (needed for the header files for the tool chain) is currently held in a [http://git-scm.com/ git] repository run by [http://southpole.se/ South Pole]. It is best to save the source for these into the gnu-src path just created when checking out from the OpenCores SVN repository.

 cd gnu-src
 git clone git://git.openrisc.net/jonas/uClibc
 git clone git://git.openrisc.net/jonas/linux 

==== Building ====

There are two toolchains that can be compiled using different libraries.
* The newlib toolchain, with toolchain executables prefixed by or32-elf- is for compiling applications which will be run on the bare metal, or without an operating system (this includes building the Linux kernel).
* The uClibc toolchain, with toolchain exeutables prefixed by or32-linux- is for compiling software intended to run on Linux, as userspace applications.

The script used to build the toolchains is bld-all.sh and it is found in the gnu-src/ path. It will create a unified build environment when compiling the GNU tools (binutils, GCC, GDB.). For a full list of options provided by the build script, run it with the --help option.

 ./bld-all.sh --help 

The following instructions assume the tools are installed in /opt/openrisc, which is a common choice (/opt/or32 is also popular). Substitute your chosen installation directory in the following instructions. It is assumed that [[Or1ksim]] has been installed in /opt/or1ksim.

To build and install both tool chains from scratch:

 ./bld-all.sh --force --prefix /opt/openrisc --or1ksim-dir /opt/or1ksim --uclibc-dir uClibc --linux-dir linux 

To build and install just hte newlib tool chain:

 ./bld-all.sh --force --prefix /opt/openrisc --or1ksim-dir /opt/or1ksim --no-uclibc --no-or32-linux 

To build and install just the uClibc tool chain:

 ./bld-all.sh --force --prefix /opt/openrisc --or1ksim-dir /opt/or1ksim --uclibc-dir uClibc --linux-dir linux --no-newlib --no-or32-elf 

Add the new tools to the path. Under sh or bash

 export PATH=$PATH:/opt/openrisc/bin

Under csh or tcsh

 setenv PATH $PATH:/opt/openrisc/bin

These commands will typically be added to your .profile or .login file.

'''Note.''' Some users have reported problems when rebuilding the uClibc tool chain a second time, due to the existing headers on the search path. The solution is to remove the existing implementation from the PATH variable.

=== Support for non-Linux systems ===

==== Microsoft Windows with Cygwin ====

At present only the older pre-compiled OpenRISC toolchains exist for Cygwin. The OpenRISC project currently does not have a maintainer for the toolchain on the Cygwin platform. Without one it is not certain that each toolchain release will be built for Cygwin.

If you would like to contribute to the project by maintaining a build script and guide for Cygwin platforms, please contact the OpenRISC team.

==== Apple Mac OS X ====

Robert Guenzel has provided an [http://chschroeder.gamiro.de/rg/or1ksim_macOS10.4.pdf application note] on building the toolchain (excluding GDB) for Mac OS 10.4. Users will find this provides valuable additional information beyond the instructions above.

== Tools ==

=== binutils ===

This is a collection of tools for the manipulation of object code in various object file formats. Among its many tools, it provides the assembler and linker.

Version 2.20.1 of binutils, 2.20.1, has been ported to OpenRISC and can be [http://www.opencores.org/ocsvn/openrisc/openrisc/trunk/gnu-src/binutils-2.20.1 downloaded from SVN].

More information about the GNU project's release of binutils can be found at its [http://www.gnu.org/software/binutils/ GNU homepage].

=== GCC ===

A version of GCC targeted at the OpenRISC platform is provided here. Known as a cross compiler, it is a version which will create code that is executable on an OpenRISC processor.

More information about the official GCC releases can be found at the project's homepage.

==== GCC stable version ====

GCC 4.5.1 has been ported to OpenRISC and can be [http://www.opencores.org/ocsvn/openrisc/openrisc/trunk/gnu-src/gcc-4.5.1 checked out from SVN]

The key changes since the previous version (4.2.2) are:
* Previous versions of OpenRISC GCC prefixed all global symbols (functions and variables) in the compiled code with an underscore ('_'). Historically this was done to avoid namespace clashes. However with ELF output files it really is no longer needed. GDB struggles with mapping the high level names in the compiled code to the values in the object file symbol table, particularly with STABS debug info.
: Most modern compilers leave global names unchanged for ELF targets. With this version of GCC, we have adopted this convention for OpenRISC. However it will mean that code compiled with the old compiler will not be linkable with code from the new compiler (since the naming convention for globals will be different). Assembler modules which link to global names will also need modifying. This should not cause any problem in practice, since there are not large bodies of pre-compiled library code out there, nor substantial bodies of hand-written assembler.
* Previous versions of OpenRISC GCC generated STABS debugging info by default when -g was used. This is now quite an old, inconsistent and limited format. Most modern compilers generate DWARF2 debugging for -g. DWARF2 offers a richer debugging experience, and is the preferred format for GDB. It is what is generated if you use GCC with -ggdb. With this version of GCC, we have made DWARF2 the default debugging format for OpenRISC GCC. This should not cause compatibility problems. STABS debugging output can still be generated by using -gstabs.
* C++ is supported, but uses only static linking of libraries (since dynamic linking is not currently supported in binutils).
* Function prologues are now much more flexible, being generated by the ''prologue'' pattern in the machine definition.
* The "red zone" is reduced to 128 bytes, but is now actually used (previously it was defined to be 2K, but not used. It is thus essential that interrupt handlers do not use the first 128 bytes of stack. An option -mredzone=''size'' is available to change this, including setting the red zone to zero (which will reduce performance).
* Sibcall optimization is now supported by default.
* The frame pointer is omitted for all optimization levels above -O0.
* Option -maj is no longer supported.
* All regression tests now pass.

==== Development version ====

There is currently no active development version. However work will shortly start on a new version including the following features
* position independent code
* shared objects
* dynamic linking
* realistic scheduling model
* profiling support
* more efficient thread handling

When this work starts, we shall consider moving to the latest GCC code base (what will become GCC 4.7).

==== Backwards compatibility ====

A number of backwards compatibility issues have been identified.
* As noted above, global variables in the source code are no longer prefixed by underscore ('_') in the generated code.
* The constants '''OR1K''', '''__or1k__''' and '''__OR1K__''' were not defined in GCC 4.2.2 (they had been in earlier releases). These are now defined.
* GCC 3.4.4. for OpenRISC assumed the availability of hardware multiplication, but not hardware division by default (i.e. -mhard-mul, -msoft-div), which was consistent with the default Verilog configuration. GCC 4.2.2 changed this to assume neither hardware multiplication nor hardware division are present (i.e. -msoft-mul, -msoft-div). The current GCC 4.5.1, has restored the default to -mhard-mul, -msoft-div ofr consistency with the default hardware configuration.

=== GDB ===

The GNU Project Debugger (GDB) is a standard debugging tool. It is used for debugging code while it is executing on any OpenRISC target, be it simulated (architectural simulator or RTL) or physical (FPGA, or ASIC.) It also provides a convenient mechanism for transferring and running code in any OpenRISC based system.

==== GDB stable version ====

GDB 7.2 has now been ported to the OpenRISC 1000 architecture and is regarded as the stable implementation.

Key new features are:
* support for DWARF2 debug format by default.
* support for GCC 4.5.1.
* support for gdbserver under [[Linux|OpenRISC Linux]].
* support for core file debugging

Known issues are:
* there are still many regression failures, which remain to be investigated.
* gdbserver relies on a range of Linux system calls, not all of which are fully implemented.
* OpenRISC Linux does not currently generate valid core files.
* Message "Value being assigned to is no longer active" is given when trying to alter a register immediately after loading a new program image. This is a known bug in GDB. It is one feature of a complex problem with the way GDB represents stack frames.
:One workaround is to set a breakpoint on the first instruction of the loaded image, run to that breakpoint (which will do nothing), and then GDB will allow registers to be set. However user nyawn has found a small [cvs.fedoraproject.org/viewvc/devel/gdb/gdb-6.8-bz436037-reg-no-longer-active.patch?view=log patch] from the Fedora project which fixes this particular problem. 

Details of the internal workings of the GDB port for OpenRISC 1000 can be found in the application note [http://www.embecosm.com/download/ean3.html Howto: Porting the GNU Debugger: Practical Experience with the OpenRISC 1000 Architecture] published by Embecosm. Although based on GDB 6.8, much of the content is relevant to GDB 7.2.

Details of the implementation of the RSP server functionality for Or1ksim can be found in the application note Howto: GDB Remote Serial Protocol: Writing a RSP Server published by Embecosm.

This version of GDB works with the graphical user interface DDD. It has also been tested with the Insight graphical debugger and appears to work.

==== Backwards compatibility ====

The following compatibility issues have been noted.
* The current stable version is only compatible with OpenRISC GCC 4.5.1 and later, due to the change in global symbol handling and changes to function prologues.
* Support for the legacy OpenRISC Remote JTAG Protocol has now been dropped.
* Only version 0.3.0 or later of the architectural simulator, [[Or1ksim]] is supported.

== Libraries ==

=== newlib ===

There is a fully tested port of the GNU toolchan using the version 1.18.0 of newlib, with board support packages suitable for use with Or1ksim and a number of other boards.

This is a smaller and simpler C library than uClibc, and is better suited to development of bare-metal applications. It is also used to test the entire GNU toolchain.

The library is automatically linked when using the newlib version of the GCC compiler (or32-elf-gcc). The target board is specified by -m''boardname''. If not board is specified, the default (-mor1ksim) is suitable for use with [[Or1ksim]]. At present the boards supported are:
* [[newlib ml501]]
* [[newlib or1ksim]] (the default, output to the console running the program)
* [[newlib or1ksim-uart]] (output to a 16550 UART mapped at 0x92000000)
* [[newlib ordb1a3pe1500]]
* [[newlib orpsocrefdesign]].

Further information is availble in [http://www.embecosm.com/download/ean9.html Embecosm Application Note 9] ''Howto: Porting Newlib: A Simple Guide'', which explains in full detail how the port for the OpenRISC 1000 architecture was done.

==== Newlib port acknowledgements ====

This [http://www.doc.ic.ac.uk/~jab00/or32-newlib/ original port] was for newlib 1.13.0 by Jacob Bower, then of Imperial College, London.

The port was completely rewritten and tested for newlib 1.18.0 by [[User:Jeremybennett|Jeremy Bennett]] of [http://www.embecosm.com Embecosm].

The port was subsequently extended by [[User:Julius|Julius Baxter]] to make support of multiple boards much more flexible.

=== uClibc ===

This is a C library aimed at embedded systems. It removes a lot of the bulk that comes with a standard C library, such as the GNU C Library, but still has all the functionality needed for an operating system such as Linux, so it is ideal for embedded applications.

At present the OpenRISC port of uClibc is hosted on a git repository provided by [http://southpole.se/ South Pole], which can be browsed and downloaded from [http://openrisc.southpole.se/cgit.cgi/jonas/uClibc/ http://openrisc.southpole.se/cgit.cgi/jonas/uClibc/]

For more information about uClibc see the [http://www.uclibc.org/about.html project's homepage].

== Testing ==

=== Newlib tool chain ===

=== uClibc tool chain ===

== Release program ==

=== Project team ===

=== newlib tool chain release schedule ===

=== uClibc tool chain release schedule ===

== Future Plans ==

=== Contributing ===
