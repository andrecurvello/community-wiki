This page contains information relating to the OpenRISC 1000 architecture and the specification document.

= Download Latest Draft =

The latest draft of the architecture specification can be downloaded [http://opencores.org/websvn,filedetails?repname=openrisc&path=%2Fopenrisc%2Ftrunk%2Fdocs%2Fopenrisc_arch_draft.odt here] ([http://en.wikipedia.org/wiki/OpenDocument ODT format])

= Proposed changes =

This section is to keep track of proposed alterations to the OpenRISC 1000.

=== Typos, Clarifications ===

The following section should be used to list proposed typos and clarifications which need to be made to future revisions of the architecture spec document.

=== Versioning ===

There are a few version-tracking issues to be dealt with.

==== Version Registers ====

The existing implementation version registers are not as good as they could be, and some proposals for changing them have been made.

* Add new 32-bit version register, VR2, in SPR space, address 9. It identifies the implementation (model) and version of the OpenRISC 1000 processor.

 [31:24] VER Version
 Implementation-specific version information. This value should 
 increase for more recent versions. The CPU implementation 
 specification document should indicate how to interpret this field.
 
 [23:0] CPUID CPU Identification
 Implementation-specific identification number. Each unique 
 implementation should have a unique identification value.

The 8-bit CPUID field of the VR can be used to determine the implementation. A list of know implementations and unique IDs can probably be maintained in a document kept alongside the architecture spec and/or on this wiki page. I think the OR1200 should have its ID as 0x12 and  or1ksim as 0x01. Any sufficiently different branch of any implementation, that is not likely to be re-merged, should get its own unique ID.


* A VR2-presence bit in existing VR register - bit 15 (currently reserved)

* Implementation revision/build information registers, REVIR0-REVIR4, SPR addresses 10-14. These 5 registers provide detailed information on the CPU's revision. The exact use of these registers is implementation-specific but are big enough to store a 160-bit SHA1 hash value.

The REVI registers helps us use that neat trick with git, but is mostly designed to help keep track of local modifications to the project before synthesis is performed. If people aren't using git locally there's many other ways to store local modifications there. For or1ksim, it's a way of getting a useful size amount of information into registers which the software can read.

==== Architecture Versions ====

As the architecture is modified and possibly expanded there needs to be a way of tracking the various versions of the architecture, both in implementation (eg. via a register) and in the document itself.

==== Architecture Document Versions ====

The document itself will change over time as its contents are amended, clarified or expanded. There needs to be a clear way of tracking the versions of the document. At present, the current draft document is revision 0 pending the first set of updates to the architecture.
